<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.szmsd.bas.mapper.BasSellerMapper">

        <!-- 通用查询映射结果 -->
        <resultMap id="BaseResultMap" type="com.szmsd.bas.domain.BasSeller">
                    <id column="id" property="id"/>
                    <result column="create_by_name" property="createByName"/>
                    <result column="create_time" property="createTime"/>
                    <result column="update_by_name" property="updateByName"/>
                    <result column="update_time" property="updateTime"/>
                    <result column="remark" property="remark"/>
                    <result column="create_by" property="createBy"/>
                    <result column="update_by" property="updateBy"/>
                    <result column="del_flag" property="delFlag"/>
                    <result column="account" property="account"/>
                    <result column="init_email" property="initEmail"/>
                    <result column="cus_no" property="cusNo"/>
                    <result column="password" property="password"/>
                    <result column="state" property="state"/>
                    <result column="is_active" property="isActive"/>
                    <result column="salt" property="salt"/>
                    <result column="service _manager" property="service Manager"/>
        </resultMap>

        <!-- 通用查询结果列 -->
        <sql id="Base_Column_List">
                create_by_name,
                create_time,
                update_by_name,
                update_time,
                remark,
            id, create_by, update_by, del_flag, account, init_email, cus_no, password, state, is_active, salt, service _manager
        </sql>
    <select id="selectBasSeller" resultType="com.szmsd.bas.dto.BasSellerSysDto">
        SELECT o.id,o.init_email,o.user_name,o.service_manager,o.service_manager_name,o.service_manager_nick_name,o.service_staff,
        o.service_staff_name,o.service_staff_nick_name,o.seller_code,if(count(s.vaild = '0' or null)=0,1,0) as reviewState,o.is_active
        FROM bas_seller o left join bas_seller_certificate s on o.seller_code = s.seller_code
        ${ew.customSqlSegment}
        group by o.seller_code
        <if test="reviewState!=null" >
            having reviewState = #{reviewState}
        </if>
        LIMIT #{pageNum},#{pageSize}
    </select>

    <select id="countBasSeller" resultType="java.lang.Integer">
        select count(*) from (SELECT o.id,o.init_email,o.user_name,o.seller_code,if(count(s.vaild = '0')=0,1,0) as
        reviewState,o.is_active
        FROM bas_seller o left join bas_seller_certificate s on o.seller_code = s.seller_code
        ${ew.customSqlSegment}
        group by o.seller_code
        <if test="reviewState!=null">
            having reviewState = #{reviewState}
        </if>
        )t
    </select>
    <select id="selectfssAccountBalance" resultType="java.util.Map" parameterType="com.szmsd.bas.dto.BasSellerSysDto">
        SELECT cus_code as cusCode ,credit_type as creditType from fss_account_balance
        <where>
            <if test="creditType!=null and creditType!=''">
                credit_type=#{creditType}
            </if>
        </where>
        GROUP BY cus_code
    </select>


</mapper>
